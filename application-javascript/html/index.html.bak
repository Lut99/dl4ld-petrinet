<!DOCTYPE html>
<html>
        <title>petrinet</title>
<meta charset="UTF-8"> 
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="html/styles/style.css">
<link rel="stylesheet" href="html/styles/w3.css">
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Allerta+Stencil">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/jerosoler/Drawflow/dist/drawflow.min.css">
<link rel="stylesheet" type="text/css" href="/html/joint.min.css" />
<script src="https://cdn.jsdelivr.net/gh/jerosoler/Drawflow/dist/drawflow.min.js"></script>

  <script src="https://cdn.jsdelivr.net/gh/jerosoler/Drawflow/dist/drawflow.min.js"></script>
  <script src="/html/raphael.min.js"</script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/js/all.min.js" integrity="sha256-KzZiKy0DWYsnwMF+X1DvQngQ2/FxF7MF3Ff72XcpuPs=" crossorigin="anonymous"></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/jerosoler/Drawflow@0.0.48/dist/drawflow.min.css">
  <link rel="stylesheet" type="text/css" href="/html/beautiful.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/css/all.min.css" integrity="sha256-h20CPZ0QyXlBuAw7A+KluUYx/3pK+c7lYEpqLTlxjYQ=" crossorigin="anonymous" />
  <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@9"></script>
  <script src="https://unpkg.com/micromodal/dist/micromodal.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/fake-smile@1.0.1/smil.user.min.js"></script>
        <script src="/node_modules/jquery/dist/jquery.js"></script>
        <script src="/node_modules/lodash/lodash.js"></script>
        <script src="/node_modules/backbone/backbone.js"></script>

        <script src="/html/joint.min.js"></script>
        <script src="/html/pn.js"></script>
<head>
</head>

<style>
html, body{
        height:100%;
        width:100%;
}
</style>


<script src="html/scripts/jquery-3.3.1.min.js"></script>
<script src="/socket.io/socket.io.js"></script>

<body>
	<script>
		let editor;
	</script>
<div class="wrapper">
	<div class="col">
		<div class="drag-drawflow">test</div>
	</div>

  	<div id="paper"></div>
	<!--	<div id="editor-pane" class="w3-border w3-display-topright"></div>
  	<div id="aux-pane" class="w3-border w3-sand w3-display-bottomright"></div>
	<div id="notification-pane" class="w3-container w3-display-topmiddle w3-opacity"></div>-->
</div>
  <script>
	function getX(x) {
		const pos_x = x || 1;
		return pos_x * ( editor.precanvas.clientWidth / (editor.precanvas.clientWidth * editor.zoom)) - (editor.precanvas.getBoundingClientRect().x * ( editor.precanvas.clientWidth / (editor.precanvas.clientWidth * editor.zoom)));
	}

	function getY(y) {
		const pos_y = y || 1;
      		return pos_y * ( editor.precanvas.clientHeight / (editor.precanvas.clientHeight * editor.zoom)) - (editor.precanvas.getBoundingClientRect().y * ( editor.precanvas.clientHeight / (editor.precanvas.clientHeight * editor.zoom)));
	}

	  $.when( $.ready ).then(function() {

		var id = document.getElementById("canvas");
		 var paper = Raphael(canvas, 600,600);
		  var circle = paper.circle(50,40,10);
		  circle.attr("fill", "#f00")

                //id.setAttribute("style", "height:" + window.innerHeight + "px;width:" +window.innerWidth/2+"px;")
                //id.setAttribute("style", "height:" + window.innerHeight + "px;width:" +window.innerWidth+"px;")
		//editor = new Drawflow(id);
		//editor.start();

		// open web socket
                socket = io()
                socket.emit('ready', '');

		socket.on('tokens', function(data) {
                	console.log("tokens> ", data);

		})
		socket.on('places', function(data) {
                	console.log("places> ", data);
			const places = JSON.parse(data);
			places.forEach(function(p){
				const id = p.Record.id+"-N003-html";
				const data = {
					owner: p.Record.owner,
					tokens: p.Record.tokens.map(function(t) { return t.id})
				}
				$("#"+id).text(JSON.stringify(data));
			})

		})
		socket.on('transitions', function(data) {
                	console.log("transitions> ", data);
			const transitions = JSON.parse(data);
			transitions.forEach(function(t) {
				const id =t.Record.id+"-N003-html";
				console.log(id)
				const data = {
					owner: t.Record.owner,
					action: t.Record.action,
				}

				$("#"+id).text(JSON.stringify(data));
			})

			console.log(editor.export());

		})

                socket.on('net', function(data) {
                        console.log("nets> ", data);
                        try{
				const draw = {
					drawflow: {
					}
				}
                                nets = JSON.parse(data);
				nets.forEach(function(n)  {
					draw.drawflow[n.Record.id] = {
						data: {}
					};
					const d = draw.drawflow[n.Record.id].data;
					editor.addModule(n.Record.id);
					editor.changeModule(n.Record.id);
					n.Record.arcs.forEach(function(arc, c) {
						const src = arc.src;
						const dst = arc.dst;
						const i = c*2;
						if(d[src.id]) {
							d[src.id].outputs = {
								output_1: {
									connections: [ {node: dst.id,output: "input_1"} ]
								}
							}
						} else {
							d[src.id] = {
								id: src.id,
								pos_x: getX(i*200),
								pos_y: getY(0),
								name: src.id,
								data: src,
								class: src.type,
								html: `<div><p>${src.id}</p><p id="${src.id}-${n.Record.id}-html">${JSON.stringify(src)}</p></div>`,
								typenode:false,
								inputs: {},
								outputs: {
									output_1: {
										connections: [ {node: dst.id,output: "input_1"} ]
									}
								}

							}
						}
						if(d[dst.id]) {
							d[dst.id].inputs = { 
								input_1: {
									connections: [ { node: src.id, input: "output_1" }]
								}
							}
						} else {
							d[dst.id] = {
								id: dst.id,
								pos_x: getX((i+1)*300),
								pos_y: getY(0),
								name: dst.id,
								data: dst,
								class: dst.type,
								html: `<div><h4>${dst.id}</h4><p id="${dst.id}-${n.Record.id}-html">${JSON.stringify(dst)}</p></div>`,
								typenode:false,
								inputs: {
									input_1: {
										connections: [ { node: src.id, input: "output_1" }]
									}
								},
								outputs: {
								}
							}
						}
					})

				})
				console.log("importing: ", draw)
				editor.import(draw);


                        } catch(err) {
                                console.log(err)
                        }

                });

	  });

  </script>
    

</body>
</html>
